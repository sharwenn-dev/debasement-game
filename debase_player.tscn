[gd_scene load_steps=6 format=3 uid="uid://cponqcw7k51d0"]

[sub_resource type="GDScript" id="GDScript_5h67k"]
script/source = "extends CharacterBody3D

var SPEED = 4.0
const JUMP_VELOCITY = 2.0

const CAM_SENS = 0.03
@onready var camera = $head/Camera3D

@onready var BASE_FOV = camera.fov
var FOV_CHANGE = 0.5

const BOB_FREQ = 2.4
const BOB_AMP = 0.08
var t_bob = 0.0

var inertia = Vector3.ZERO
var damage_lock = 0.0

@onready var model = $MeshInstance3D
@onready var health_bar = $head/Camera3D/HUD/health_bar
@onready var hunger_bar = $head/Camera3D/HUD/hunger_bar

var hunger_down_time = 5.0
var time_since_hunger = 0.0
var hunger_down_amount = 3
var starve_time = 5.0
var starve_timer = 0.0

@export var data = {
	\"max_health\": 50,
	\"health\": 50,
	\"max_hunger\": 100,
	\"hunger\": 100,
	\"left\": null,
	\"right\": null,
	\"value_progs\": {
		\"kills\": 0,
		\"starve_time\": 0
	},
}

func player_setup():
	hunger_bar.max_value = data.max_hunger
	hunger_bar.value = data.hunger
	health_bar.max_value = data.max_health
	health_bar.value = data.health

func _ready() -> void:
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	model.visible = false
	player_setup()

func _unhandled_input(event: InputEvent) -> void:
	if event is InputEventMouseMotion and \\
	Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:
		self.rotate_y(-event.relative.x * (CAM_SENS / 10.0))
		camera.rotate_x(-event.relative.y * (CAM_SENS / 10.0))
		camera.rotation.x = clamp(camera.rotation.x, deg_to_rad(-90), deg_to_rad(90))

func headbob(time):
	var pos = Vector3.ZERO
	pos.x = cos(time * BOB_FREQ/2) * BOB_AMP
	pos.y = sin(time * BOB_FREQ) * BOB_AMP
	return pos

func take_damage(dmg):
	if damage_lock == 0.0:
		damage_lock = 0.5
		data.health -= dmg
		if data.health <= 0:
			await get_tree().create_timer(0.25).timeout
			Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
			OS.alert(\"You died!\")
			get_tree().reload_current_scene()
	pass

func _physics_process(delta: float) -> void:
	if data.health <= 0:
		#kill
		if Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:
			Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
		OS.alert(\"dead\")
		get_tree().call_deferred(\"reload_current_scene\")
	
	time_since_hunger += delta
	if time_since_hunger >= hunger_down_time:
		data.hunger -= hunger_down_amount
		time_since_hunger = 0.0
	
	if data.hunger <= 0:
		starve_timer += delta
		if starve_timer >= starve_time:
			data.health -= 10
			starve_timer = 0.0
	
	if Input.is_action_just_pressed(\"ui_cancel\"):
		if Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:
			Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
		else:
			Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	
	if Input.is_action_just_pressed(\"reset_test\"):
		get_tree().call_deferred(\"reload_current_scene\")
	
	if not is_on_floor():
		velocity += get_gravity() * delta
	if Input.is_action_just_pressed(\"ui_accept\") and is_on_floor():
		velocity.y = JUMP_VELOCITY
		
	var input_dir := Input.get_vector(\"left\", \"right\", \"up\", \"down\")
	var direction := (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
	if direction:
		velocity.x = direction.x * SPEED
		velocity.z = direction.z * SPEED
	elif not direction:
		velocity.x = move_toward(velocity.x, 0, SPEED)
		velocity.z = move_toward(velocity.z, 0, SPEED)
		if is_on_floor():
			pass
	
	t_bob += delta * velocity.length() * float(is_on_floor())
	camera.transform.origin = headbob(t_bob)
	
	var velocity_clamped = clamp(velocity.length(), 0.5, SPEED*2.0)
	var target_fov = BASE_FOV + FOV_CHANGE * velocity_clamped
	camera.fov = lerp(camera.fov, target_fov, delta * 8.0)
	
	velocity += inertia
	inertia = inertia.move_toward(Vector3.ZERO, delta*1000.0)
	
	damage_lock = max(damage_lock-delta, 0.0)
	player_setup()
	
	move_and_slide()
"

[sub_resource type="CapsuleMesh" id="CapsuleMesh_juic7"]

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_py7ks"]
radius = 0.517652
height = 2.17593

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_ur2xb"]
bg_color = Color(0, 0, 0, 1)
corner_detail = 20

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_6jvax"]

[node name="debase_player" type="CharacterBody3D" groups=["Player"]]
wall_min_slide_angle = 3.14159
script = SubResource("GDScript_5h67k")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.261884, 0)
mesh = SubResource("CapsuleMesh_juic7")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.00091821, 0.183595, 0)
shape = SubResource("CapsuleShape3D_py7ks")

[node name="head" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0340518, 0.764707, 0)

[node name="Camera3D" type="Camera3D" parent="head"]
current = true
fov = 90.0

[node name="HUD" type="CanvasLayer" parent="head/Camera3D"]

[node name="hunger_bar" type="ProgressBar" parent="head/Camera3D/HUD"]
self_modulate = Color(0.969497, 0.548401, 0, 1)
clip_children = 2
anchors_preset = 2
anchor_top = 1.0
anchor_bottom = 1.0
offset_left = 23.0
offset_top = -135.0
offset_right = 44.0
grow_vertical = 0
theme_override_styles/background = SubResource("StyleBoxFlat_ur2xb")
theme_override_styles/fill = SubResource("StyleBoxFlat_6jvax")
value = 50.0
fill_mode = 3
show_percentage = false

[node name="health_bar" type="ProgressBar" parent="head/Camera3D/HUD"]
self_modulate = Color(0.968627, 0.152941, 0, 1)
clip_children = 2
anchors_preset = 2
anchor_top = 1.0
anchor_bottom = 1.0
offset_top = -135.0
offset_right = 21.0
grow_vertical = 0
theme_override_styles/background = SubResource("StyleBoxFlat_ur2xb")
theme_override_styles/fill = SubResource("StyleBoxFlat_6jvax")
value = 50.0
fill_mode = 3
show_percentage = false

[node name="Left" type="Node3D" parent="head"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.522243, -0.295132, -0.616556)

[node name="CSGBox3D" type="CSGBox3D" parent="head/Left"]
visible = false
size = Vector3(0.188477, 0.140625, 0.169922)
